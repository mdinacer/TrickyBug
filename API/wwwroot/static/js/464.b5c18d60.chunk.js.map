{"version":3,"file":"static/js/464.b5c18d60.chunk.js","mappings":"uLAMe,SAASA,EAAT,GAAgE,IAAD,IAA9BC,QAAAA,OAA8B,MAApB,UAAoB,EAC5E,OACE,gBAAKC,UAAU,2DAAf,UACE,4BACE,SAACC,EAAA,EAAD,KACA,cAAGD,UAAU,wCAAb,SAAsDD,S,wBCH9D,IAAMG,GAAiBC,EAAAA,EAAAA,OACrB,kBAAM,iCAEFC,GAAcD,EAAAA,EAAAA,OAAK,kBAAM,iCAEhB,SAASE,IACtB,MCVa,WACb,IAAMC,GAAUC,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,WAC/B,GAAkDD,EAAAA,EAAAA,KAChD,SAACE,GAAD,OAAWA,EAAMC,UADXC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,aAG3BC,GAAWC,EAAAA,EAAAA,MAOjB,OALAC,EAAAA,EAAAA,YAAU,WACHL,GACHG,GAASG,EAAAA,EAAAA,SAEV,CAACH,EAAUR,EAASK,IAChB,CACLL,QAAAA,EACAO,aAAAA,EACAF,cAAAA,EACAC,SAAAA,GDN+CM,GAAzCZ,EAAR,EAAQA,QAASK,EAAjB,EAAiBA,cAAeE,EAAhC,EAAgCA,aAC1BC,GAAWC,EAAAA,EAAAA,MASjB,OACE,gBAAKf,UAAU,8DAAf,UACE,iBAAKA,UAAU,iFAAf,WACE,cAAGA,UAAU,4EAAb,sBAGA,SAACE,EAAD,CAAgBiB,OAAQN,EAAcO,UAblB,SAACC,GACzBP,GAASQ,EAAAA,EAAAA,IAAgBD,QAarB,gBAAKrB,UAAU,YAAf,SACGW,GACC,SAACP,EAAD,CAAaE,QAASA,KAEtB,gBAAKN,UAAU,gBAAf,UACE,SAACF,EAAD,CAAuBC,QAAQ","sources":["app/components/common/LoadingComponentSmall.tsx","app/pages/Tickets/TicketsPage.tsx","app/hooks/useTickets.tsx"],"sourcesContent":["import Spinner from \"./Spinner\";\n\ninterface Props {\n  message?: string;\n}\n\nexport default function LoadingComponentSmall({ message = \"Loading\" }: Props) {\n  return (\n    <div className=\"relative  w-full h-full flex items-center justify-center\">\n      <div>\n        <Spinner />\n        <p className=\" font-Oswald text-5xl py-10 uppercase\">{message}</p>\n      </div>\n    </div>\n  );\n}\n","import { lazy } from \"react\";\nimport LoadingComponent from \"../../components/common/LoadingComponent\";\nimport LoadingComponentSmall from \"../../components/common/LoadingComponentSmall\";\nimport useTickets from \"../../hooks/useTickets\";\nimport { TicketParams } from \"../../models/ticketParams\";\nimport { setTicketParams } from \"../../slices/ticketSlice\";\nimport { useAppDispatch } from \"../../store/configureStore\";\n\nconst TicketsFilters = lazy(\n  () => import(\"../../components/Tickets/TicketsFilters\")\n);\nconst TicketsGrid = lazy(() => import(\"../../components/Tickets/TicketsGrid\"));\n\nexport default function TicketsPage() {\n  const { tickets, ticketsLoaded, ticketParams } = useTickets();\n  const dispatch = useAppDispatch();\n\n  const handleChangParams = (value: TicketParams) => {\n    dispatch(setTicketParams(value));\n  };\n\n  //   if (!ticketsLoaded)\n  //     return <LoadingComponent message=\"Loading Tickets please wait\" />;\n\n  return (\n    <div className=\"h-full min-h-screen w-screen bg-slate-300 pb-10 pt-20 flex \">\n      <div className=\"container flex flex-col mx-auto   flex-auto  w-full rounded-md overflow-hidden\">\n        <p className=\"text-5xl flex-initial font-Oswald uppercase underline underline-offset-2 \">\n          Tickets\n        </p>\n        <TicketsFilters params={ticketParams} setParams={handleChangParams} />\n        <div className=\"flex-auto\">\n          {ticketsLoaded ? (\n            <TicketsGrid tickets={tickets} />\n          ) : (\n            <div className=\"w-full h-full\">\n              <LoadingComponentSmall message=\"loading tickets, please wait\" />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\nimport { fetchTicketsAsync, ticketSelectors } from \"../slices/ticketSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/configureStore\";\n\nexport default function useProjects() {\n  const tickets = useAppSelector(ticketSelectors.selectAll);\n  const { ticketsLoaded, metaData, ticketParams } = useAppSelector(\n    (state) => state.ticket\n  );\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!ticketsLoaded) {\n      dispatch(fetchTicketsAsync());\n    }\n  }, [dispatch, tickets, ticketsLoaded]);\n  return {\n    tickets,\n    ticketParams,\n    ticketsLoaded,\n    metaData,\n  };\n}\n"],"names":["LoadingComponentSmall","message","className","Spinner","TicketsFilters","lazy","TicketsGrid","TicketsPage","tickets","useAppSelector","ticketSelectors","state","ticket","ticketsLoaded","metaData","ticketParams","dispatch","useAppDispatch","useEffect","fetchTicketsAsync","useTickets","params","setParams","value","setTicketParams"],"sourceRoot":""}