{"version":3,"file":"static/js/19.0a2b6a75.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/solid/esm/CheckIcon.js","app/components/common/AppCheckbox.tsx","app/components/common/Dropdown.tsx","app/models/dataLists.ts","app/components/projects/ProjectFilters.tsx","app/models/enums.ts","../node_modules/@heroicons/react/solid/esm/ChevronDownIcon.js"],"sourcesContent":["import * as React from \"react\";\n\nfunction CheckIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(CheckIcon);\nexport default ForwardRef;","import { CheckIcon } from \"@heroicons/react/solid\";\n\ninterface Props {\n  label: string;\n  isChecked: boolean;\n  onChange: (value: boolean) => void;\n}\n\nconst styles = {\n  buttonStyle:\n    \"flex bg-slate-200 text-inherit flex-row gap-x-2 items-center  border-inherit w-full\",\n};\n\nexport default function AppCheckbox({ label, isChecked, onChange }: Props) {\n  return (\n    <button\n      type=\"button\"\n      title=\"checkbox\"\n      className={styles.buttonStyle}\n      onClick={() => onChange(!isChecked)}\n    >\n      <div className=\"pb-2 pt-3 px-3 h-full w-auto border-2 border-inherit  rounded-sm bg-slate-800 text-white \">\n        {isChecked ? (\n          <CheckIcon className=\"w-6 h-6\" />\n        ) : (\n          <div className=\"w-6 h-6\"></div>\n        )}\n      </div>\n      <p className=\" font-Oswald text-lg lg:text-2xl capitalize font-thin pr-5\">\n        {label}\n      </p>\n    </button>\n  );\n}\n","import { ChevronDownIcon } from \"@heroicons/react/solid\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  title: string;\n  items: { name: string; value: string | number }[];\n  //fullWidth?: boolean;\n  onChange: (value: any) => void;\n  selectedValue: any;\n  addAllItem?: boolean;\n}\n\nconst styles = {\n  dropdownContainer: \"relative border-x-2 border-x-slate-200 bg-slate-200\",\n  dropdownButton:\n    \"pb-2 pt-3 px-5 font-Oswald font-thin inline-flex justify-between items-center w-full\",\n  dropdownButtonText:\n    \"flex flex-row items-center justify-between w-full gap-x-5 text-lg lg:text-2xl\",\n  dropdownButtonPlaceholder: \"text-lg lg:text-2xl text-gray-400\",\n  inputValidationStyle:\n    \"h-auto font-Oswald text-lg leading-none w-full font-thin px-5 py-0 text-gray-600\",\n  dropdownButtonIcon: \"w-8 h-8 ml-2 text-inherit\",\n  dropdownListContainer:\n    \"absolute bg-white text-base z-50 drop-shadow-md list-none divide-y  divide-gray-100 rounded shadow my-4  w-full px-5\",\n  dropdownList: \"py-5 list-none flex flex-col gap-y-2 font-Montserrat\",\n  dropdownListItem:\n    \"font-Montserrat text-left text-black text-lg font-thin cursor-pointer\",\n};\n\nexport default function Dropdown({\n  title,\n  items,\n  //fullWidth = false,\n  onChange,\n  selectedValue,\n}: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<{\n    name: string;\n    value: string | number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (selectedValue && selectedItem == null) {\n      const item = items.find((i) => i.name === selectedValue);\n      setSelectedItem(item ? item : null);\n    }\n  }, [items, selectedItem, selectedValue]);\n\n  type ItemType = { name: string; value: string | number };\n\n  const handleOnSelectItem = (item: ItemType) => {\n    setSelectedItem(item);\n    onChange(item.value);\n    setIsOpen(false);\n  };\n  return (\n    <div\n      className={`\n    ${!selectedValue ? \"border-x-red-500\" : \"border-x-white\"}  \n    ${styles.dropdownContainer}`}\n    >\n      <button\n        type=\"button\"\n        className={styles.dropdownButton}\n        onClick={() => setIsOpen((prev) => !prev)}\n      >\n        {selectedItem ? (\n          <p className={styles.dropdownButtonText}>\n            <span className=\"text-gray-500  text-xl  capitalize \">\n              {title}{\" \"}\n            </span>\n            <span className=\"uppercase text-inherit\">{selectedItem.name}</span>\n          </p>\n        ) : (\n          <p className={styles.dropdownButtonPlaceholder}>{title}</p>\n        )}\n        <ChevronDownIcon className={styles.dropdownButtonIcon} />\n      </button>\n\n      <div\n        className={`${isOpen ? \"block \" : \"hidden\"}  ${\n          styles.dropdownListContainer\n        }`}\n        id=\"dropdown\"\n      >\n        <ul className={styles.dropdownList} aria-labelledby=\"dropdown\">\n          {items.map((item) => (\n            <li\n              key={item.value}\n              value={item.value}\n              onClick={() => handleOnSelectItem(item)}\n              className={styles.dropdownListItem}\n            >\n              {item.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import { IssueOccurrence, IssueSeverity, IssueNature, TicketPriority, TicketStatus } from \"./enums\";\n\nexport const SortOptions = [\n    { name: \"Name\", value: \"name\" },\n    { name: \"Recently Added\", value: \"added\" },\n    { name: \"Recently Updated\", value: \"updated\" },\n];\n\n\nconst ticketDescription = {\n    operatingSystem: \"Mac OS Monterey\",\n    browser: \"Chrome Latest\",\n    occurrence: IssueOccurrence.Persistent,\n    severity: IssueSeverity.Critical,\n    nature: IssueNature.Functional,\n};\n\nexport const Tickets = [\n    {\n        id: 1,\n        creationDate: \"2022-02-5\",\n        subject: \"Server not responding\",\n        body: \"Server stop responding after adding a new item\",\n        priority: TicketPriority.Medium,\n        description: ticketDescription,\n        author: \"Tom Hardy\",\n        status: TicketStatus.New,\n    },\n    {\n        id: 2,\n        creationDate: \"2022-02-15\",\n        subject: \"UI not responsive\",\n        body: \"The user interface doesn't support mobile display\",\n        priority: TicketPriority.Medium,\n        description: ticketDescription,\n        author: \"Jake Jackson\",\n        status: TicketStatus.Pending,\n    },\n    {\n        id: 3,\n        creationDate: \"2022-02-13\",\n        subject: \"Can't access the profile\",\n        body: \"when I try to access my profile I get a 500 error\",\n        priority: TicketPriority.Urgent,\n        description: ticketDescription,\n        author: \"Lilly Morison\",\n        status: TicketStatus.Fixed,\n    },\n    {\n        id: 4,\n        creationDate: \"2022-02-8\",\n        subject: \"Server not responding\",\n        body: \"Server stop responding after adding a new Product\",\n        priority: TicketPriority.Medium,\n        description: ticketDescription,\n        author: \"Jimmy Useless\",\n        status: TicketStatus.Duplicate,\n    },\n    {\n        id: 5,\n        creationDate: \"2022-02-5\",\n        subject: \"The response time is big\",\n        body: \"Server is slow\",\n        priority: TicketPriority.Low,\n        description: ticketDescription,\n        author: \"Mark Flash\",\n        status: TicketStatus.Deferred,\n    },\n];","import { useState } from \"react\";\nimport { FieldValues, useForm } from \"react-hook-form\";\nimport { SortOptions } from \"../../models/dataLists\";\nimport { setProjectParams } from \"../../slices/projectSlice\";\nimport { useAppDispatch } from \"../../store/configureStore\";\nimport AppCheckbox from \"../common/AppCheckbox\";\nimport Dropdown from \"../common/Dropdown\";\nimport AppTextInput from \"../common/TextInput\";\n\n// interface Props {\n//   selectedSort: any;\n//   setSelectedSort: (value: any) => void;\n// }\n\nexport default function ProjectFilters() {\n  const dispatch = useAppDispatch();\n  const [selectedSort, setSelectedSort] = useState(\"Name\");\n  const [isMemberOnly, setIsMemberOnly] = useState(false);\n  const { control, handleSubmit } = useForm({\n    mode: \"all\",\n    //resolver: yupResolver<any>(productValidation)\n  });\n\n  function handleSortChange(value: any) {\n    setSelectedSort(value);\n    dispatch(setProjectParams({ orderBy: value }));\n  }\n\n  function handleIsMemberOnlyChange(value: boolean) {\n    setIsMemberOnly(value);\n    dispatch(setProjectParams({ isMember: value }));\n  }\n\n  function handleSubmitData(data: FieldValues) {\n    dispatch(setProjectParams(data));\n  }\n  return (\n    <div className=\"w-full h-auto ml-auto flex-initial z-[3] flex flex-col lg:flex-row gap-x-0 gap-y-5 lg:gap-y-0 lg:gap-x-5 items-center justify-start\">\n      <div className=\" px-5 w-full lg:max-w-sm  flex-initial\">\n        <Dropdown\n          items={SortOptions}\n          title=\"Order By\"\n          onChange={handleSortChange}\n          selectedValue={selectedSort}\n        />\n      </div>\n\n      <form\n        onSubmit={handleSubmit(handleSubmitData)}\n        className=\"flex flex-row w-full lg:w-auto gap-y-2 lg:gap-y-0 px-5 flex-auto\"\n      >\n        <AppTextInput\n          control={control}\n          label=\"search\"\n          placeholder=\"search\"\n          name=\"searchTerm\"\n          \n        />\n        <input\n          className=\"cursor-pointer bg-slate-800 text-white py-1 px-5 uppercase font-Oswald text-xl font-thin\"\n          type=\"submit\"\n          value={\"Search\"}\n        />\n      </form>\n\n      <div className=\"border-black flex-initial w-full lg:w-auto mx-auto px-5\">\n        <AppCheckbox\n          label=\"Projects where I'm a member\"\n          isChecked={isMemberOnly}\n          onChange={handleIsMemberOnlyChange}\n        />\n      </div>\n    </div>\n  );\n}\n","export enum IssueOccurrence {\n    Persistent,\n    Frequent,\n    Random,\n    Rare\n}\n\nexport enum TicketStatus {\n    New,\n    Assigned,\n    Open,\n    Fixed,\n    Pending,\n    Retest,\n    Verified,\n    Reopen,\n    Closed,\n    Duplicate,\n    Rejected,\n    Deferred,\n    NotBug\n}\n\nexport enum TicketPriority {\n    Low,\n    Medium,\n    High,\n    Urgent\n}\n\nexport enum IssueSeverity {\n    Low,\n    Medium,\n    High,\n    Critical\n}\n\nexport enum IssueNature {\n    Functional,\n    Performance,\n    Usability,\n    Compatibility,\n    Security\n}","import * as React from \"react\";\n\nfunction ChevronDownIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;"],"names":["React","props","svgRef","Object","assign","xmlns","viewBox","fill","ref","fillRule","d","clipRule","styles","AppCheckbox","label","isChecked","onChange","type","title","className","onClick","Dropdown","items","selectedValue","useState","isOpen","setIsOpen","selectedItem","setSelectedItem","useEffect","item","find","i","name","prev","id","map","value","handleOnSelectItem","SortOptions","ticketDescription","operatingSystem","browser","occurrence","IssueOccurrence","severity","IssueSeverity","nature","IssueNature","TicketPriority","TicketStatus","ProjectFilters","dispatch","useAppDispatch","selectedSort","setSelectedSort","isMemberOnly","setIsMemberOnly","useForm","mode","control","handleSubmit","setProjectParams","orderBy","onSubmit","data","placeholder","isMember","ForwardRef"],"sourceRoot":""}