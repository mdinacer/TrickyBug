{"version":3,"file":"static/js/163.e2756a1b.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/solid/esm/SearchIcon.js","app/components/Tickets/TicketsFilters.tsx","../node_modules/@heroicons/react/solid/esm/ChevronDownIcon.js","app/components/common/Dropdown.tsx","app/models/enums.ts","app/util/enumToArray.ts"],"sourcesContent":["import * as React from \"react\";\n\nfunction SearchIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(SearchIcon);\nexport default ForwardRef;","import { SearchIcon } from \"@heroicons/react/solid\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { TicketPriority, TicketStatus } from \"../../models/enums\";\nimport { TicketParams } from \"../../models/ticketParams\";\nimport { EnumToArray } from \"../../util/enumToArray\";\nimport Dropdown from \"../common/Dropdown\";\n\ninterface Props {\n  params: TicketParams;\n  setParams: (value: any) => void;\n}\n\nexport default function TicketsFilters({ params, setParams }: Props) {\n  const [searchTerm, setSearchTerm] = useState(params.searchTerm);\n  const [searchParams] = useSearchParams();\n  const startDate = searchParams.get(\"startDate\");\n  const endDate = searchParams.get(\"endDate\");\n\n  const handleSearch = (event: any) => {\n    if (searchTerm !== params.searchTerm) setParams({ searchTerm });\n  };\n\n  const setStatus = (event: any) => {\n    const value = event.target.value;\n    if (params.status !== value)\n      setParams({ status: value === \"-1\" ? null : value });\n  };\n\n  const setPriority = (event: any) => {\n    const value = event.target.value;\n    if (params.priority !== value)\n      setParams({ priority: value === \"-1\" ? null : value });\n  };\n\n  useEffect(() => {\n    if (startDate || endDate) {\n      setParams({ startDate, endDate });\n    }\n  }, [endDate, setParams, startDate]);\n\n  return (\n    <div className=\"w-full flex flex-row  justify-around items-center  py-10\">\n      <div className=\" w-full max-w-xs flex flex-col \">\n        <div className=\"flex flex-row gap-x-3 \">\n          <input\n            autoComplete=\"off\"\n            placeholder=\"Search for project\"\n            className=\"border-x-2 py-2 pt-3 block px-5 placeholder:font-Oswald placeholder:text-gray-300 w-full h-full   font-Montserrat font-thin text-2xl text-white bg-slate-500 bg-opacity-50  focus-within:outline-none border-x-white\"\n            aria-label=\"Search\"\n            type=\"text\"\n            aria-placeholder=\"Search\"\n            onChange={(event: any) => {\n              setSearchTerm(event.target.value);\n            }}\n          />\n          <button title=\"Search Button\" onClick={handleSearch}>\n            <SearchIcon className=\"w-8 h-8\" />\n          </button>\n        </div>\n      </div>\n\n      <Dropdown\n        title=\"Status\"\n        selectedValue={\"All\"}\n        onChange={(value) =>\n          setParams({ status: value === \"-1\" ? null : value })\n        }\n        items={[{ name: \"All\", value: \"-1\" }, ...EnumToArray(TicketStatus)]}\n      />\n\n      <Dropdown\n        title=\"Priority\"\n        selectedValue={\"All\"}\n        onChange={(value) =>\n          setParams({ priority: value === \"-1\" ? null : value })\n        }\n        items={[{ name: \"All\", value: \"-1\" }, ...EnumToArray(TicketPriority)]}\n      />\n    </div>\n  );\n}\n\nconst ticketStatusOptions = [\n  { name: \"All\", value: -1 },\n  { name: \"New\", value: 0 },\n  { name: \"Assigned\", value: 1 },\n  { name: \"Open\", value: 2 },\n  { name: \"Fixed\", value: 3 },\n  { name: \"Pending\", value: 4 },\n  { name: \"Retest\", value: 5 },\n  { name: \"Verified\", value: 6 },\n  { name: \"Reopen\", value: 7 },\n  { name: \"Closed\", value: 8 },\n  { name: \"Duplicate\", value: 9 },\n  { name: \"Rejected\", value: 10 },\n  { name: \"Deferred\", value: 11 },\n  { name: \"NotBug\", value: 12 },\n];\n\nconst ticketPriorityOptions = [\n  { name: \"All\", value: -1 },\n  { name: \"Low\", value: 0 },\n  { name: \"Medium\", value: 1 },\n  { name: \"High\", value: 2 },\n  { name: \"Urgent\", value: 3 },\n];\n","import * as React from \"react\";\n\nfunction ChevronDownIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;","import { ChevronDownIcon } from \"@heroicons/react/solid\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  title: string;\n  items: { name: string; value: string | number }[];\n  fullWidth?: boolean;\n  onChange: (value: any) => void;\n  selectedValue: any;\n  addAllItem?: boolean;\n}\n\nconst styles = {\n  dropdownContainer: \"relative border-x-2 border-x-slate-200 bg-slate-500\",\n  dropdownButton:\n    \"pb-2 pt-3 px-5 font-Oswald font-thin inline-flex justify-between items-center w-full\",\n  dropdownButtonText:\n    \"flex flex-row items-center justify-between w-full gap-x-5 text-2xl\",\n  dropdownButtonPlaceholder: \"text-2xl text-gray-300\",\n  inputValidationStyle:\n    \"h-auto font-Oswald text-lg leading-none w-full font-thin px-5 py-0 text-gray-600\",\n  dropdownButtonIcon: \"w-8 h-8 ml-2 text-white\",\n  dropdownListContainer:\n    \"absolute bg-white text-base z-50 drop-shadow-md list-none divide-y  divide-gray-100 rounded shadow my-4  w-full px-5\",\n  dropdownList: \"py-5 list-none flex flex-col gap-y-2 font-Montserrat\",\n  dropdownListItem:\n    \"font-Montserrat text-left text-black text-lg font-thin cursor-pointer\",\n};\n\nexport default function Dropdown({\n  title,\n  items,\n  fullWidth = false,\n  onChange,\n  selectedValue,\n}: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<{\n    name: string;\n    value: string | number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (selectedValue && selectedItem == null) {\n      const item = items.find((i) => i.name === selectedValue);\n      setSelectedItem(item ? item : null);\n    }\n  }, [items, selectedItem, selectedValue]);\n\n  type ItemType = { name: string; value: string | number };\n\n  const handleOnSelectItem = (item: ItemType) => {\n    setSelectedItem(item);\n    onChange(item.value);\n    setIsOpen(false);\n  };\n  return (\n    <div\n      className={`\n    ${fullWidth ? \"w-full\" : \"max-w-sm w-full\"}\n    ${!selectedValue ? \"border-x-red-500\" : \"border-x-white\"}  \n    ${styles.dropdownContainer}`}\n    >\n      <button\n        type=\"button\"\n        className={styles.dropdownButton}\n        onClick={() => setIsOpen((prev) => !prev)}\n      >\n        {selectedItem ? (\n          <p className={styles.dropdownButtonText}>\n            <span className=\"text-gray-300 opacity-50  capitalize \">\n              {title}{\" \"}\n            </span>\n            <span className=\"uppercase text-white\">{selectedItem.name}</span>\n          </p>\n        ) : (\n          <p className={styles.dropdownButtonPlaceholder}>{title}</p>\n        )}\n        <ChevronDownIcon className={styles.dropdownButtonIcon} />\n      </button>\n\n      <div\n        className={`${isOpen ? \"block \" : \"hidden\"}  ${\n          styles.dropdownListContainer\n        }`}\n        id=\"dropdown\"\n      >\n        <ul className={styles.dropdownList} aria-labelledby=\"dropdown\">\n          {items.map((item) => (\n            <li\n              key={item.value}\n              value={item.value}\n              onClick={() => handleOnSelectItem(item)}\n              className={styles.dropdownListItem}\n            >\n              {item.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","export enum IssueOccurrence {\n    Persistent,\n    Frequent,\n    Random,\n    Rare\n}\n\nexport enum TicketStatus {\n    New,\n    Assigned,\n    Open,\n    Fixed,\n    Pending,\n    Retest,\n    Verified,\n    Reopen,\n    Closed,\n    Duplicate,\n    Rejected,\n    Deferred,\n    NotBug\n}\n\nexport enum TicketPriority {\n    Low,\n    Medium,\n    High,\n    Urgent\n}\n\nexport enum IssueSeverity {\n    Low,\n    Medium,\n    High,\n    Critical\n}\n\nexport enum IssueNature {\n    Functional,\n    Performance,\n    Usability,\n    Compatibility,\n    Security\n}","export function EnumToArray(object: any): { name: string, value: any }[] {\n    const arrayObjects = [];\n\n    for (const [propertyKey, propertyValue] of Object.entries(object)) {\n        if (!Number.isNaN(Number(propertyKey))) {\n            continue;\n        }\n        arrayObjects.push({ name: propertyKey, value: propertyValue });\n    }\n    return arrayObjects;\n}"],"names":["React","props","svgRef","Object","assign","xmlns","viewBox","fill","ref","fillRule","d","clipRule","TicketsFilters","params","setParams","useState","searchTerm","setSearchTerm","useSearchParams","searchParams","startDate","get","endDate","useEffect","className","autoComplete","placeholder","type","onChange","event","target","value","title","onClick","Dropdown","selectedValue","status","items","name","EnumToArray","TicketStatus","priority","TicketPriority","styles","fullWidth","isOpen","setIsOpen","selectedItem","setSelectedItem","item","find","i","prev","id","map","handleOnSelectItem","IssueOccurrence","IssueSeverity","IssueNature","object","arrayObjects","entries","propertyKey","propertyValue","Number","isNaN","push"],"sourceRoot":""}