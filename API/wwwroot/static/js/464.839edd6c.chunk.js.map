{"version":3,"file":"static/js/464.839edd6c.chunk.js","mappings":"gNAUe,SAASA,EAAT,GAA2D,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,aACxCC,EAAsDF,EAAtDE,YAAaC,EAAyCH,EAAzCG,WAAYC,EAA6BJ,EAA7BI,WAAYC,EAAiBL,EAAjBK,aAC7C,GAAoCC,EAAAA,EAAAA,UAASJ,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KAEA,SAASC,EAAiBC,GACxBF,EAAcE,GACdT,EAAaS,GAGf,OACE,gBAAKC,UAAU,gEAAf,SACGX,GAAYA,EAASI,WAAa,IACjC,iBAAKO,UAAU,6CAAf,WACE,eAAGA,UAAU,gCAAb,sBACYT,EAAc,GAAKG,EAAe,EAD9C,MACoD,KAChDH,EAAc,GAAKG,EAAeF,EAChCA,EACAD,EAAcG,EAAc,IAJlC,MAKMF,EALN,aAOA,SAAC,IAAD,CACEQ,UAAU,uDACVC,UAAWL,EAAa,EACxBM,cAAc,YACdC,gBAAgB,cAChBC,kBAAmB,wCACnBC,WAAW,MACXC,WAAW,SAAC,IAAD,CAAkBN,UAAU,YACvCV,aAAc,YAAmB,IAAhBiB,EAAe,EAAfA,SACfC,QAAQC,IAAIF,GAEZT,EAAiBS,IAEnBG,mBAAoB,EACpBC,UAAWlB,EACXmB,eAAe,SAAC,IAAD,CAAiBZ,UAAU,qB,6GCvCvC,SAASa,EAAT,GAAgE,IAAD,IAA9BC,QAAAA,OAA8B,MAApB,UAAoB,EAC5E,OACE,gBAAKd,UAAU,2DAAf,UACE,4BACE,SAACe,EAAA,EAAD,KACA,cAAGf,UAAU,wCAAb,SAAsDc,S,wBCF9D,IAAME,GAAiBC,EAAAA,EAAAA,OACrB,kBAAM,iCAEFC,GAAcD,EAAAA,EAAAA,OAAK,kBAAM,iCAEhB,SAASE,IACtB,MCXa,WACb,IAAMC,GAAUC,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,WAC/B,GAAkDD,EAAAA,EAAAA,KAChD,SAACE,GAAD,OAAWA,EAAMC,UADXC,EAAR,EAAQA,cAAepC,EAAvB,EAAuBA,SAAUqC,EAAjC,EAAiCA,aAG3BC,GAAWC,EAAAA,EAAAA,MAOjB,OALAC,EAAAA,EAAAA,YAAU,WACHJ,GACHE,GAASG,EAAAA,EAAAA,SAEV,CAACH,EAAUP,EAASK,IAChB,CACLL,QAAAA,EACAM,aAAAA,EACAD,cAAAA,EACApC,SAAAA,GDLyD0C,GAAnDX,EAAR,EAAQA,QAASK,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,aAAcrC,EAA9C,EAA8CA,SACxCsC,GAAWC,EAAAA,EAAAA,MASjB,OACE,gBAAK5B,UAAU,8DAAf,UACE,iBAAKA,UAAU,iFAAf,WACE,eAAIA,UAAU,qDAAd,sBAGA,SAACgB,EAAD,CAAgBgB,OAAQN,EAAcO,UAblB,SAACC,GACzBP,GAASQ,EAAAA,EAAAA,IAAgBD,OAapB7C,IACC,gBAAKW,UAAU,2BAAf,UACE,SAACZ,EAAA,EAAD,CACEC,SAAUA,EACVC,aAAc,SAACS,GAAD,OACZ4B,GAAS9B,EAAAA,EAAAA,IAAc,CAAED,WAAYG,EAAO,WAKpD,gBAAKC,UAAU,YAAf,SACGyB,GACC,SAACP,EAAD,CAAaE,QAASA,KAEtB,gBAAKpB,UAAU,gBAAf,UACE,SAACa,EAAD,CAAuBC,QAAQ","sources":["app/components/common/AppPagination.tsx","app/components/common/LoadingComponentSmall.tsx","app/pages/Tickets/TicketsPage.tsx","app/hooks/useTickets.tsx"],"sourcesContent":["import { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/solid\";\nimport { useState } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { MetaData } from \"../../models/pagination\";\n\ninterface Props {\n  metaData: MetaData;\n  onPageChange: (page: number) => void;\n}\n\nexport default function AppPagination({ metaData, onPageChange }: Props) {\n  const { currentPage, totalItems, totalPages, itemsPerPage } = metaData;\n  const [pageNumber, setPageNumber] = useState(currentPage);\n\n  function handlePageChange(page: number) {\n    setPageNumber(page);\n    onPageChange(page);\n  }\n\n  return (\n    <div className=\" border-x-2 border-x-inherit px-10 text-inherit w-auto h-auto\">\n      {metaData && metaData.totalPages > 1 && (\n        <div className=\"flex flex-row justify-between items-center\">\n          <p className=\"font-Oswald font-thin text-xl\">\n            Showing {(currentPage - 1) * itemsPerPage + 1} to{\" \"}\n            {(currentPage - 1) * itemsPerPage > totalItems\n              ? totalItems\n              : currentPage * itemsPerPage}{\" \"}\n            of {totalItems} items\n          </p>\n          <ReactPaginate\n            className=\"flex flex-row items-center gap-x-3 py-2 px-5 w-auto \"\n            forcePage={pageNumber - 1}\n            pageClassName=\"font-thin\"\n            activeClassName=\"font-normal\"\n            pageLinkClassName={\"p-2 font-Oswald  text-inherit text-xl\"}\n            breakLabel=\"...\"\n            nextLabel={<ChevronRightIcon className=\"h-6 w-6\" />}\n            onPageChange={({ selected }) => {\n              console.log(selected);\n\n              handlePageChange(selected);\n            }}\n            pageRangeDisplayed={3}\n            pageCount={totalPages}\n            previousLabel={<ChevronLeftIcon className=\"h-6 w-6\" />}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import Spinner from \"./Spinner\";\n\ninterface Props {\n  message?: string;\n}\n\nexport default function LoadingComponentSmall({ message = \"Loading\" }: Props) {\n  return (\n    <div className=\"relative  w-full h-full flex items-center justify-center\">\n      <div>\n        <Spinner />\n        <p className=\" font-Oswald text-5xl py-10 uppercase\">{message}</p>\n      </div>\n    </div>\n  );\n}\n","import { lazy } from \"react\";\nimport AppPagination from \"../../components/common/AppPagination\";\nimport LoadingComponent from \"../../components/common/LoadingComponent\";\nimport LoadingComponentSmall from \"../../components/common/LoadingComponentSmall\";\nimport useTickets from \"../../hooks/useTickets\";\nimport { TicketParams } from \"../../models/ticketParams\";\nimport { setPageNumber, setTicketParams } from \"../../slices/ticketSlice\";\nimport { useAppDispatch } from \"../../store/configureStore\";\n\nconst TicketsFilters = lazy(\n  () => import(\"../../components/Tickets/TicketsFilters\")\n);\nconst TicketsGrid = lazy(() => import(\"../../components/Tickets/TicketsGrid\"));\n\nexport default function TicketsPage() {\n  const { tickets, ticketsLoaded, ticketParams, metaData } = useTickets();\n  const dispatch = useAppDispatch();\n\n  const handleChangParams = (value: TicketParams) => {\n    dispatch(setTicketParams(value));\n  };\n\n  //   if (!ticketsLoaded)\n  //     return <LoadingComponent message=\"Loading Tickets please wait\" />;\n\n  return (\n    <div className=\"h-full min-h-screen w-screen bg-slate-300 pb-10 pt-20 flex \">\n      <div className=\"container flex flex-col mx-auto   flex-auto  w-full rounded-md overflow-hidden\">\n        <h1 className=\"flex-initial font-Oswald text-7xl pb-10  uppercase\">\n          Tickets\n        </h1>\n        <TicketsFilters params={ticketParams} setParams={handleChangParams} />\n        {metaData && (\n          <div className=\"py-5 border-black w-full\">\n            <AppPagination\n              metaData={metaData}\n              onPageChange={(page: number) =>\n                dispatch(setPageNumber({ pageNumber: page + 1 }))\n              }\n            />\n          </div>\n        )}\n        <div className=\"flex-auto\">\n          {ticketsLoaded ? (\n            <TicketsGrid tickets={tickets} />\n          ) : (\n            <div className=\"w-full h-full\">\n              <LoadingComponentSmall message=\"loading tickets, please wait\" />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\nimport { fetchTicketsAsync, ticketSelectors } from \"../slices/ticketSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/configureStore\";\n\nexport default function useProjects() {\n  const tickets = useAppSelector(ticketSelectors.selectAll);\n  const { ticketsLoaded, metaData, ticketParams } = useAppSelector(\n    (state) => state.ticket\n  );\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!ticketsLoaded) {\n      dispatch(fetchTicketsAsync());\n    }\n  }, [dispatch, tickets, ticketsLoaded]);\n  return {\n    tickets,\n    ticketParams,\n    ticketsLoaded,\n    metaData,\n  };\n}\n"],"names":["AppPagination","metaData","onPageChange","currentPage","totalItems","totalPages","itemsPerPage","useState","pageNumber","setPageNumber","handlePageChange","page","className","forcePage","pageClassName","activeClassName","pageLinkClassName","breakLabel","nextLabel","selected","console","log","pageRangeDisplayed","pageCount","previousLabel","LoadingComponentSmall","message","Spinner","TicketsFilters","lazy","TicketsGrid","TicketsPage","tickets","useAppSelector","ticketSelectors","state","ticket","ticketsLoaded","ticketParams","dispatch","useAppDispatch","useEffect","fetchTicketsAsync","useTickets","params","setParams","value","setTicketParams"],"sourceRoot":""}