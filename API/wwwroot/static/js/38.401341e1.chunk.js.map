{"version":3,"file":"static/js/38.401341e1.chunk.js","mappings":"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","sources":["app/components/Phases/PhaseForm.tsx","app/components/projects/projectDetails/ProjectPhases.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { FieldValues, useForm } from \"react-hook-form\";\nimport agent from \"../../api/agent\";\nimport { ProjectPhase } from \"../../models/phase\";\nimport { projectSelectors } from \"../../slices/projectSlice\";\nimport { useAppSelector } from \"../../store/configureStore\";\nimport AppTextArea from \"../common/TextArea\";\nimport AppTextInput from \"../common/TextInput\";\n\ninterface Props {\n  projectId: string;\n  phase?: ProjectPhase | null;\n  isFullScreen?: boolean;\n  onClose: () => void;\n}\n\nexport default function PhaseForm({ projectId, phase, onClose }: Props) {\n  const isEdit = !!phase;\n  const project = useAppSelector((state) =>\n    projectSelectors.selectById(state, projectId)\n  );\n  const { control, handleSubmit, reset } = useForm({\n    mode: \"all\",\n    //resolver: yupResolver<any>(productValidation)\n  });\n\n  useEffect(() => {\n    if (phase) {\n      const item = {\n        title: phase.title,\n        description: phase.description,\n      };\n      reset(item, { keepTouched: true });\n    }\n  }, [phase, reset]);\n\n  async function handleSubmitData(data: FieldValues) {\n    const item: any = { ...data, projectId };\n\n    if (!projectId) return;\n\n    const itemChanged =\n      phase &&\n      (phase.title !== item.title || phase.description !== item.description);\n\n    console.log(item, itemChanged);\n\n    try {\n      if (isEdit && itemChanged) {\n        await agent.Phases.update({\n          ...item,\n          id: phase.id,\n        });\n      }\n\n      if (!isEdit) {\n        await agent.Phases.create(projectId, item);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      onClose();\n    }\n  }\n\n  return (\n    <div className=\"fixed top-0 left-0 h-screen w-screen bg-slate-600 z-[5] flex items-center justify-center py-20\">\n      <div className=\" max-w-xl w-full text-white\">\n        <div>\n          <div className=\"flex flex-row justify-between border-b border-b-white py-1 items-end \">\n            <p className=\"font-Oswald text-5xl uppercase\">\n              {isEdit ? \"Edit Phase\" : \"New Phase\"}\n            </p>\n            <p className=\"font-Oswald text-xl uppercase font-thin\">\n              {project?.title}\n            </p>\n          </div>\n          <form\n            className=\"py-5 flex flex-col gap-y-5\"\n            onSubmit={handleSubmit(handleSubmitData)}\n          >\n            <AppTextInput\n              name=\"title\"\n              placeholder=\"Title\"\n              label=\"Title\"\n              fullWidth\n              control={control}\n              rules={{ required: \"Title is required\" }}\n            />\n\n            <AppTextArea\n              name=\"description\"\n              placeholder=\"Description\"\n              label=\"Description\"\n              fullWidth\n              rows={4}\n              control={control}\n              rules={{ required: \"Description is required\" }}\n            />\n\n            <div className=\"flex flex-row gap-x-2 mx-auto w-full justify-end py-5\">\n              <input\n                className=\"cursor-pointer border-slate-500 border-2 text-slate-300 py-1 px-5 uppercase font-Oswald text-xl font-thin\"\n                type=\"button\"\n                value=\"Cancel\"\n                onClick={onClose}\n              />\n              <input\n                className=\"cursor-pointer bg-slate-800 text-white py-1 px-5 uppercase font-Oswald text-xl font-thin\"\n                type=\"submit\"\n                value={isEdit ? \"Update Phase\" : \"Create Phase\"}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { lazy, useCallback, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport agent from \"../../../api/agent\";\nimport { ProjectPhase } from \"../../../models/phase\";\nimport PhaseForm from \"../../Phases/PhaseForm\";\n\nconst PhasesList = lazy(() => import(\"../../Phases/PhasesList\"));\n\ninterface Props {\n  projectId: string;\n  projectSlug: string;\n  isPermitted: boolean;\n}\n\nexport default function ProjectPhases({\n  projectId,\n  projectSlug,\n  isPermitted,\n}: Props) {\n  const [phases, setPhases] = useState<ProjectPhase[]>([]);\n  const [selectedPhase, setSelectedPhase] = useState<ProjectPhase | null>(null);\n  const [loaded, setLoaded] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const loadProjectPhases = useCallback(() => {\n    agent.Projects.listRecentPhases(projectId)\n      .then((response) => {\n        setPhases(response);\n      })\n      .catch((err) => console.log(err))\n      .finally(() => setLoaded(false));\n  }, [projectId]);\n\n  useEffect(() => {\n    if (projectId && !loaded) {\n      loadProjectPhases();\n    }\n\n    return () => {\n      setPhases([]);\n    };\n  }, [loadProjectPhases, loaded, projectId]);\n\n  const handleOnClose = () => {\n    loadProjectPhases();\n    if (selectedPhase) setSelectedPhase(null);\n    setIsOpen(false);\n  };\n\n  function handleOnPhaseSelect(item: ProjectPhase) {\n    setSelectedPhase(item);\n    setIsOpen(true);\n  }\n\n  if (isOpen && projectId)\n    return (\n      <PhaseForm\n        projectId={projectId}\n        onClose={handleOnClose}\n        phase={selectedPhase}\n      />\n    );\n\n  return (\n    <div className=\"relative pb-5 h-full flex flex-col bg-slate-200 rounded-md overflow-hidden\">\n      <div className=\"flex-initial bg-slate-700 px-10 text-white  py-2 flex flex-row items-center justify-between\">\n        <p className=\"font-Oswald text-xl uppercase \">Recent Phases</p>\n        <div className=\"flex flex-row gap-x-5\">\n          {isPermitted && (\n            <button\n              onClick={() => setIsOpen(true)}\n              className=\"text-Montserrat text-sm uppercase underline underline-offset-2\"\n              type=\"button\"\n            >\n              Add\n            </button>\n          )}\n          <Link\n            className=\"text-Montserrat text-sm uppercase underline underline-offset-2\"\n            to={`/projects/${projectSlug}/phases/`}\n          >\n            view all\n          </Link>\n        </div>\n      </div>\n      <div className=\"flex-auto h-full w-full px-10\">\n        {phases.length > 0 ? (\n          <PhasesList phases={phases} onPhaseSelected={handleOnPhaseSelect} />\n        ) : (\n          <div className=\"h-40 w-full flex items-center justify-center\">\n            <p className=\"font-Montserrat text-xl text-gray-400\">EMPTY</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["PhaseForm","projectId","phase","onClose","isEdit","project","useAppSelector","state","projectSelectors","useForm","mode","control","handleSubmit","reset","data","item","itemChanged","title","description","console","log","agent","id","useEffect","keepTouched","className","onSubmit","name","placeholder","label","fullWidth","rules","required","rows","type","value","onClick","PhasesList","lazy","ProjectPhases","projectSlug","isPermitted","useState","phases","setPhases","selectedPhase","setSelectedPhase","loaded","setLoaded","isOpen","setIsOpen","loadProjectPhases","useCallback","then","response","catch","err","finally","to","length","onPhaseSelected"],"sourceRoot":""}