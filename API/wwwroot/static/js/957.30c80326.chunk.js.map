{"version":3,"file":"static/js/957.30c80326.chunk.js","mappings":"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","sources":["app/components/Tickets/TicketsFilters.tsx","app/components/common/Dropdown.tsx","app/components/common/TextInput.tsx","app/models/enums.ts","app/util/enumToArray.ts","../node_modules/@heroicons/react/solid/esm/ChevronDownIcon.js"],"sourcesContent":["import { FieldValues, useForm } from \"react-hook-form\";\nimport { TicketPriority, TicketStatus } from \"../../models/enums\";\nimport { TicketParams } from \"../../models/ticketParams\";\nimport { EnumToArray } from \"../../util/enumToArray\";\nimport Dropdown from \"../common/Dropdown\";\nimport AppTextInput from \"../common/TextInput\";\n\ninterface Props {\n  params: TicketParams;\n  setParams: (value: any) => void;\n}\n\nexport default function TicketsFilters({ params, setParams }: Props) {\n  const { control, handleSubmit } = useForm({\n    mode: \"all\",\n  });\n\n  function handleSubmitData(data: FieldValues) {\n    setParams(data);\n  }\n\n  return (\n    <div className=\"w-full flex flex-col lg:flex-row  justify-around items-center lg:gap-y-0 gap-y-5  py-5\">\n      <form\n        onSubmit={handleSubmit(handleSubmitData)}\n        className=\"flex flex-col lg:flex-row w-full max-w-lg gap-y-2 flex-auto\"\n      >\n        <AppTextInput\n          control={control}\n          label=\"search\"\n          placeholder=\"search\"\n          name=\"searchTerm\"\n        />\n        <input\n          className=\"cursor-pointer bg-slate-800 text-white py-1 px-5 uppercase font-Oswald text-xl font-thin\"\n          type=\"submit\"\n          value={\"Search\"}\n        />\n      </form>\n\n      <div className=\"flex-initial max-w-sm w-full\">\n        <Dropdown\n          title=\"Status\"\n          selectedValue={\"All\"}\n          onChange={(value) =>\n            setParams({ status: value === \"-1\" ? null : value })\n          }\n          items={[{ name: \"All\", value: \"-1\" }, ...EnumToArray(TicketStatus)]}\n        />\n      </div>\n\n      <div className=\"flex-initial max-w-sm w-full\">\n        <Dropdown\n          title=\"Priority\"\n          selectedValue={\"All\"}\n          onChange={(value) =>\n            setParams({ priority: value === \"-1\" ? null : value })\n          }\n          items={[{ name: \"All\", value: \"-1\" }, ...EnumToArray(TicketPriority)]}\n        />\n      </div>\n    </div>\n  );\n}\n","import { ChevronDownIcon } from \"@heroicons/react/solid\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  title: string;\n  items: { name: string; value: string | number }[];\n  //fullWidth?: boolean;\n  onChange: (value: any) => void;\n  selectedValue: any;\n  addAllItem?: boolean;\n}\n\nconst styles = {\n  dropdownContainer: \"relative border-x-2 border-x-slate-200 bg-slate-200\",\n  dropdownButton:\n    \"pb-2 pt-3 px-5 font-Oswald font-thin inline-flex justify-between items-center w-full\",\n  dropdownButtonText:\n    \"flex flex-row items-center justify-between w-full gap-x-5 text-lg lg:text-2xl\",\n  dropdownButtonPlaceholder: \"text-lg lg:text-2xl text-gray-400\",\n  inputValidationStyle:\n    \"h-auto font-Oswald text-lg leading-none w-full font-thin px-5 py-0 text-gray-600\",\n  dropdownButtonIcon: \"w-8 h-8 ml-2 text-inherit\",\n  dropdownListContainer:\n    \"absolute bg-white text-base z-50 drop-shadow-md list-none divide-y  divide-gray-100 rounded shadow my-4  w-full px-5\",\n  dropdownList: \"py-5 list-none flex flex-col gap-y-2 font-Montserrat\",\n  dropdownListItem:\n    \"font-Montserrat text-left text-black text-lg font-thin cursor-pointer\",\n};\n\nexport default function Dropdown({\n  title,\n  items,\n  //fullWidth = false,\n  onChange,\n  selectedValue,\n}: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<{\n    name: string;\n    value: string | number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (selectedValue && selectedItem == null) {\n      const item = items.find((i) => i.name === selectedValue);\n      setSelectedItem(item ? item : null);\n    }\n  }, [items, selectedItem, selectedValue]);\n\n  type ItemType = { name: string; value: string | number };\n\n  const handleOnSelectItem = (item: ItemType) => {\n    setSelectedItem(item);\n    onChange(item.value);\n    setIsOpen(false);\n  };\n  return (\n    <div\n      className={`\n    ${!selectedValue ? \"border-x-red-500\" : \"border-x-white\"}  \n    ${styles.dropdownContainer}`}\n    >\n      <button\n        type=\"button\"\n        className={styles.dropdownButton}\n        onClick={() => setIsOpen((prev) => !prev)}\n      >\n        {selectedItem ? (\n          <p className={styles.dropdownButtonText}>\n            <span className=\"text-gray-500  text-xl  capitalize \">\n              {title}{\" \"}\n            </span>\n            <span className=\"uppercase text-inherit\">{selectedItem.name}</span>\n          </p>\n        ) : (\n          <p className={styles.dropdownButtonPlaceholder}>{title}</p>\n        )}\n        <ChevronDownIcon className={styles.dropdownButtonIcon} />\n      </button>\n\n      <div\n        className={`${isOpen ? \"block \" : \"hidden\"}  ${\n          styles.dropdownListContainer\n        }`}\n        id=\"dropdown\"\n      >\n        <ul className={styles.dropdownList} aria-labelledby=\"dropdown\">\n          {items.map((item) => (\n            <li\n              key={item.value}\n              value={item.value}\n              onClick={() => handleOnSelectItem(item)}\n              className={styles.dropdownListItem}\n            >\n              {item.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import { useController, UseControllerProps } from \"react-hook-form\";\n\ninterface Props extends UseControllerProps {\n  label: string;\n  type?: string;\n  placeholder: string;\n  //fullWidth?: boolean;\n  autoComplete?: string | undefined;\n}\n\nconst styles = {\n  inputContainer:\n    \"w-full border-x-2 border-x-black bg-slate-200 flex flex-row items-center \",\n  inputStyle:\n    \" font-Montserrat font-thin text-base lg:text-xl text-inherit placeholder:capitalize placeholder:text-gray-500  placeholder:font-Oswald pb-2 pt-3 px-5 w-full h-auto block bg-transparent focus-within:outline-none\",\n  inputValidationStyle:\n    \" h-auto font-Oswald text-xl leading-none w-full text-left font-thin px-5 py-0 text-gray-200 \",\n};\n\nexport default function AppTextInput(props: Props) {\n  const { fieldState, field } = useController({ ...props, defaultValue: \"\" });\n\n  return (\n    <div\n      className={` ${\n        fieldState.error ? \"border-r-red-500\" : \"border-x-inherit \"\n      } ${styles.inputContainer}`}\n    >\n      <input\n        className={`${styles.inputStyle}`}\n        aria-label={props.label}\n        type={props.type}\n        {...props}\n        {...field}\n      />\n      {fieldState.error && (\n        <p className={styles.inputValidationStyle}>\n          {fieldState.error.message}\n        </p>\n      )}\n    </div>\n  );\n}\n","export enum IssueOccurrence {\n    Persistent,\n    Frequent,\n    Random,\n    Rare\n}\n\nexport enum TicketStatus {\n    New,\n    Assigned,\n    Open,\n    Fixed,\n    Pending,\n    Retest,\n    Verified,\n    Reopen,\n    Closed,\n    Duplicate,\n    Rejected,\n    Deferred,\n    NotBug\n}\n\nexport enum TicketPriority {\n    Low,\n    Medium,\n    High,\n    Urgent\n}\n\nexport enum IssueSeverity {\n    Low,\n    Medium,\n    High,\n    Critical\n}\n\nexport enum IssueNature {\n    Functional,\n    Performance,\n    Usability,\n    Compatibility,\n    Security\n}","export function EnumToArray(object: any): { name: string, value: any }[] {\n    const arrayObjects = [];\n\n    for (const [propertyKey, propertyValue] of Object.entries(object)) {\n        if (!Number.isNaN(Number(propertyKey))) {\n            continue;\n        }\n        arrayObjects.push({ name: propertyKey, value: propertyValue });\n    }\n    return arrayObjects;\n}","import * as React from \"react\";\n\nfunction ChevronDownIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;"],"names":["TicketsFilters","params","setParams","useForm","mode","control","handleSubmit","className","onSubmit","data","label","placeholder","name","type","value","title","selectedValue","onChange","status","items","EnumToArray","TicketStatus","priority","TicketPriority","styles","Dropdown","useState","isOpen","setIsOpen","selectedItem","setSelectedItem","useEffect","item","find","i","onClick","prev","id","map","handleOnSelectItem","AppTextInput","props","useController","defaultValue","fieldState","field","error","message","IssueOccurrence","IssueSeverity","IssueNature","object","arrayObjects","Object","entries","propertyKey","propertyValue","Number","isNaN","push","ForwardRef","React","svgRef","assign","xmlns","viewBox","fill","ref","fillRule","d","clipRule"],"sourceRoot":""}