{"version":3,"file":"static/js/338.0c2fe5f1.chunk.js","mappings":"gNAUe,SAASA,EAAT,GAA2D,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,aACxCC,EAAsDF,EAAtDE,YAAaC,EAAyCH,EAAzCG,WAAYC,EAA6BJ,EAA7BI,WAAYC,EAAiBL,EAAjBK,aAC7C,GAAoCC,EAAAA,EAAAA,UAASJ,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KAEA,SAASC,EAAiBC,GACxBF,EAAcE,GACdT,EAAaS,GAGf,OACE,gBAAKC,UAAU,gEAAf,SACGX,GAAYA,EAASI,WAAa,IACjC,iBAAKO,UAAU,6CAAf,WACE,eAAGA,UAAU,gCAAb,sBACYT,EAAc,GAAKG,EAAe,EAD9C,MACoD,KAChDH,EAAc,GAAKG,EAAeF,EAChCA,EACAD,EAAcG,EAAc,IAJlC,MAKMF,EALN,aAOA,SAAC,IAAD,CACEQ,UAAU,uDACVC,UAAWL,EAAa,EACxBM,cAAc,YACdC,gBAAgB,cAChBC,kBAAmB,wCACnBC,WAAW,MACXC,WAAW,SAAC,IAAD,CAAkBN,UAAU,YACvCV,aAAc,YAAmB,IAAhBiB,EAAe,EAAfA,SACfC,QAAQC,IAAIF,GAEZT,EAAiBS,IAEnBG,mBAAoB,EACpBC,UAAWlB,EACXmB,eAAe,SAAC,IAAD,CAAiBZ,UAAU,qB,mEC3CzCa,EAAc,CACvB,CAAEC,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,iBAAkBC,MAAO,SACjC,CAAED,KAAM,mBAAoBC,MAAO,YAIjCC,EAAoB,CACtBC,gBAAiB,kBACjBC,QAAS,gBACTC,WAAYC,EAAAA,GAAAA,WACZC,SAAUC,EAAAA,GAAAA,SACVC,OAAQC,EAAAA,GAAAA,YASMC,EAAAA,GAAAA,OAGFC,EAAAA,GAAAA,IAOED,EAAAA,GAAAA,OAGFC,EAAAA,GAAAA,QAOED,EAAAA,GAAAA,OAGFC,EAAAA,GAAAA,MAOED,EAAAA,GAAAA,OAGFC,EAAAA,GAAAA,UAOED,EAAAA,GAAAA,IAGFC,EAAAA,GAAAA,U,qBClET,IAAKN,EAOAM,EAgBAD,EAOAH,EAOAE,E,iIArCZ,SAAYJ,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,agBZ,SAAYD,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,MAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAZ,CAAYA,IAAAA,EAAAA,KAOZ,SAAYH,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,MAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAZ,CAAYA,IAAAA,EAAAA,KAOZ,SAAYE,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAZ,CAAYA,IAAAA,EAAAA,M,kKC5BNG,GAAiBC,EAAAA,EAAAA,OACrB,kBAAM,iCAEFC,GAAeD,EAAAA,EAAAA,OACnB,kBAAM,yDAGO,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCrC,EAAAA,EAAAA,UAASkB,EAAAA,EAAAA,IAAjD,eACA,GADA,UCda,WACb,IAAMoB,GAAWC,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,WAChC,GAAqCD,EAAAA,EAAAA,KAAe,SAACE,GAAD,OAAWA,EAAMC,WAA7DC,EAAR,EAAQA,eAAgBjD,EAAxB,EAAwBA,SAClB0C,GAAWC,EAAAA,EAAAA,MAOjB,OALAO,EAAAA,EAAAA,YAAU,WACHD,GACHP,GAASS,EAAAA,EAAAA,SAEV,CAACT,EAAUE,EAAUK,IACjB,CACLL,SAAAA,EACAK,eAAAA,EACAjD,SAAAA,GDE6CoD,IAAvCR,EAAR,EAAQA,SAA0B5C,GAAlC,EAAkBiD,eAAlB,EAAkCjD,UAClC,GAA4BM,EAAAA,EAAAA,WAAS,GAArC,eAAO+C,EAAP,KAAeC,EAAf,MACiBC,EAAAA,EAAAA,GAAc,uBAS/B,OAAIF,GAAe,SAACG,EAAA,EAAD,CAAaC,YAAa,kBAAMH,GAAU,OAG3D,gBAAK3C,UAAU,uDAAf,UACE,iBAAKA,UAAU,sDAAf,WACE,iBAAKA,UAAU,8FAAf,WACE,eAAIA,UAAU,wEAAd,uBAGA,mBACE+C,KAAK,SACL/C,UAAU,2FACVgD,QAAS,kBAAML,GAAU,IAH3B,6BAQF,gBAAK3C,UAAU,gCAAf,UACE,SAAC2B,EAAD,OAGF,gBAAK3B,UAAU,qDAAf,UACE,SAAC6B,EAAD,CAAcI,SAAUA,MAEzB5C,IACC,gBAAKW,UAAU,2BAAf,UACE,SAACZ,EAAA,EAAD,CACEC,SAAUA,EACVC,aAAc,SAACS,GAAD,OACZgC,GAASlC,EAAAA,EAAAA,IAAc,CAAED,WAAYG,EAAO","sources":["app/components/common/AppPagination.tsx","app/models/dataLists.ts","app/models/enums.ts","app/pages/projects/ProjectsPage.tsx","app/hooks/useProjects.tsx"],"sourcesContent":["import { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/solid\";\nimport { useState } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { MetaData } from \"../../models/pagination\";\n\ninterface Props {\n  metaData: MetaData;\n  onPageChange: (page: number) => void;\n}\n\nexport default function AppPagination({ metaData, onPageChange }: Props) {\n  const { currentPage, totalItems, totalPages, itemsPerPage } = metaData;\n  const [pageNumber, setPageNumber] = useState(currentPage);\n\n  function handlePageChange(page: number) {\n    setPageNumber(page);\n    onPageChange(page);\n  }\n\n  return (\n    <div className=\" border-x-2 border-x-inherit px-10 text-inherit w-auto h-auto\">\n      {metaData && metaData.totalPages > 1 && (\n        <div className=\"flex flex-row justify-between items-center\">\n          <p className=\"font-Oswald font-thin text-xl\">\n            Showing {(currentPage - 1) * itemsPerPage + 1} to{\" \"}\n            {(currentPage - 1) * itemsPerPage > totalItems\n              ? totalItems\n              : currentPage * itemsPerPage}{\" \"}\n            of {totalItems} items\n          </p>\n          <ReactPaginate\n            className=\"flex flex-row items-center gap-x-3 py-2 px-5 w-auto \"\n            forcePage={pageNumber - 1}\n            pageClassName=\"font-thin\"\n            activeClassName=\"font-normal\"\n            pageLinkClassName={\"p-2 font-Oswald  text-inherit text-xl\"}\n            breakLabel=\"...\"\n            nextLabel={<ChevronRightIcon className=\"h-6 w-6\" />}\n            onPageChange={({ selected }) => {\n              console.log(selected);\n\n              handlePageChange(selected);\n            }}\n            pageRangeDisplayed={3}\n            pageCount={totalPages}\n            previousLabel={<ChevronLeftIcon className=\"h-6 w-6\" />}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { IssueOccurrence, IssueSeverity, IssueNature, TicketPriority, TicketStatus } from \"./enums\";\n\nexport const SortOptions = [\n    { name: \"Name\", value: \"name\" },\n    { name: \"Recently Added\", value: \"added\" },\n    { name: \"Recently Updated\", value: \"updated\" },\n];\n\n\nconst ticketDescription = {\n    operatingSystem: \"Mac OS Monterey\",\n    browser: \"Chrome Latest\",\n    occurrence: IssueOccurrence.Persistent,\n    severity: IssueSeverity.Critical,\n    nature: IssueNature.Functional,\n};\n\nexport const Tickets = [\n    {\n        id: 1,\n        creationDate: \"2022-02-5\",\n        subject: \"Server not responding\",\n        body: \"Server stop responding after adding a new item\",\n        priority: TicketPriority.Medium,\n        description: ticketDescription,\n        author: \"Tom Hardy\",\n        status: TicketStatus.New,\n    },\n    {\n        id: 2,\n        creationDate: \"2022-02-15\",\n        subject: \"UI not responsive\",\n        body: \"The user interface doesn't support mobile display\",\n        priority: TicketPriority.Medium,\n        description: ticketDescription,\n        author: \"Jake Jackson\",\n        status: TicketStatus.Pending,\n    },\n    {\n        id: 3,\n        creationDate: \"2022-02-13\",\n        subject: \"Can't access the profile\",\n        body: \"when I try to access my profile I get a 500 error\",\n        priority: TicketPriority.Urgent,\n        description: ticketDescription,\n        author: \"Lilly Morison\",\n        status: TicketStatus.Fixed,\n    },\n    {\n        id: 4,\n        creationDate: \"2022-02-8\",\n        subject: \"Server not responding\",\n        body: \"Server stop responding after adding a new Product\",\n        priority: TicketPriority.Medium,\n        description: ticketDescription,\n        author: \"Jimmy Useless\",\n        status: TicketStatus.Duplicate,\n    },\n    {\n        id: 5,\n        creationDate: \"2022-02-5\",\n        subject: \"The response time is big\",\n        body: \"Server is slow\",\n        priority: TicketPriority.Low,\n        description: ticketDescription,\n        author: \"Mark Flash\",\n        status: TicketStatus.Deferred,\n    },\n];","export enum IssueOccurrence {\n    Persistent,\n    Frequent,\n    Random,\n    Rare\n}\n\nexport enum TicketStatus {\n    New,\n    Assigned,\n    Open,\n    Fixed,\n    Pending,\n    Retest,\n    Verified,\n    Reopen,\n    Closed,\n    Duplicate,\n    Rejected,\n    Deferred,\n    NotBug\n}\n\nexport enum TicketPriority {\n    Low,\n    Medium,\n    High,\n    Urgent\n}\n\nexport enum IssueSeverity {\n    Low,\n    Medium,\n    High,\n    Critical\n}\n\nexport enum IssueNature {\n    Functional,\n    Performance,\n    Usability,\n    Compatibility,\n    Security\n}","import { lazy, useState } from \"react\";\nimport AppPagination from \"../../components/common/AppPagination\";\nimport ProjectForm from \"../../components/projects/projectDetails/ProjectForm\";\nimport useProjects from \"../../hooks/useProjects\";\nimport { SortOptions } from \"../../models/dataLists\";\nimport { setPageNumber } from \"../../slices/projectSlice\";\nimport { useAppDispatch } from \"../../store/configureStore\";\nimport useMediaQuery from \"../../util/mediaQuery\";\n\nconst ProjectFilters = lazy(\n  () => import(\"../../components/projects/ProjectFilters\")\n);\nconst ProjectsList = lazy(\n  () => import(\"../../components/projects/ProjectsList\")\n);\n\nexport default function ProjectsPage() {\n  const dispatch = useAppDispatch();\n  const [selectedSort, setSelectedSort] = useState(SortOptions[0]);\n  const { projects, projectsLoaded, metaData } = useProjects();\n  const [isEdit, setIsEdit] = useState(false);\n  const isMobile = useMediaQuery(\"(max-width: 1024px)\");\n\n  // if (!projectsLoaded)\n  //   return (\n  //     <div className=\"py-20 w-screen h-screen bg-slate-300 flex items-center justify-center\">\n  //       <LoadingComponent message=\"Loading Projects...\" />\n  //     </div>\n  //   );\n\n  if (isEdit) return <ProjectForm handleClose={() => setIsEdit(false)} />;\n\n  return (\n    <div className=\"h-full min-h-screen w-screen bg-slate-100 pt-20 flex\">\n      <div className=\"flex-auto lg:container mx-auto h-auto flex flex-col\">\n        <div className=\" w-full flex flex-col-reverse lg:flex-row justify-between lg:items-center py-5 px-5 lg:px-0\">\n          <h1 className=\"flex-initial font-Oswald text-5xl lg:text-7xl pb-5 lg:pb-10 uppercase\">\n            projects\n          </h1>\n          <button\n            type=\"button\"\n            className=\" font-Oswald uppercase font-thin ml-auto bg-slate-600 text-white py-2 px-5 lg:rounded-md\"\n            onClick={() => setIsEdit(true)}\n          >\n            Add Project\n          </button>\n        </div>\n        <div className=\"flex flex-col justify-between\">\n          <ProjectFilters />\n        </div>\n\n        <div className=\"relative container mx-auto flex-auto lg:p-10 py-5 \">\n          <ProjectsList projects={projects} />\n        </div>\n        {metaData && (\n          <div className=\"py-5 border-black w-full\">\n            <AppPagination\n              metaData={metaData}\n              onPageChange={(page: number) =>\n                dispatch(setPageNumber({ pageNumber: page + 1 }))\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\nimport { fetchProjectsAsync, projectSelectors } from \"../slices/projectSlice\";\nimport { useAppDispatch, useAppSelector } from \"../store/configureStore\";\n\nexport default function useProjects() {\n  const projects = useAppSelector(projectSelectors.selectAll);\n  const { projectsLoaded, metaData } = useAppSelector((state) => state.project);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (!projectsLoaded) {\n      dispatch(fetchProjectsAsync());\n    }\n  }, [dispatch, projects, projectsLoaded]);\n  return {\n    projects,\n    projectsLoaded,\n    metaData,\n  };\n}\n"],"names":["AppPagination","metaData","onPageChange","currentPage","totalItems","totalPages","itemsPerPage","useState","pageNumber","setPageNumber","handlePageChange","page","className","forcePage","pageClassName","activeClassName","pageLinkClassName","breakLabel","nextLabel","selected","console","log","pageRangeDisplayed","pageCount","previousLabel","SortOptions","name","value","ticketDescription","operatingSystem","browser","occurrence","IssueOccurrence","severity","IssueSeverity","nature","IssueNature","TicketPriority","TicketStatus","ProjectFilters","lazy","ProjectsList","ProjectsPage","dispatch","useAppDispatch","projects","useAppSelector","projectSelectors","state","project","projectsLoaded","useEffect","fetchProjectsAsync","useProjects","isEdit","setIsEdit","useMediaQuery","ProjectForm","handleClose","type","onClick"],"sourceRoot":""}