{"version":3,"file":"static/js/178.d747bb17.chunk.js","mappings":"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","sources":["app/models/enums.ts","app/pages/projects/ProjectTicketsPage.tsx","app/util/queryParams.ts"],"sourcesContent":["export enum IssueOccurrence {\n    Persistent,\n    Frequent,\n    Random,\n    Rare\n}\n\nexport enum TicketStatus {\n    New,\n    Assigned,\n    Open,\n    Fixed,\n    Pending,\n    Retest,\n    Verified,\n    Reopen,\n    Closed,\n    Duplicate,\n    Rejected,\n    Deferred,\n    NotBug\n}\n\nexport enum TicketPriority {\n    Low,\n    Medium,\n    High,\n    Urgent\n}\n\nexport enum IssueSeverity {\n    Low,\n    Medium,\n    High,\n    Critical\n}\n\nexport enum IssueNature {\n    Functional,\n    Performance,\n    Usability,\n    Compatibility,\n    Security\n}","import { format } from \"date-fns\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Link, useParams, useSearchParams } from \"react-router-dom\";\nimport agent from \"../../api/agent\";\nimport LoadingComponent from \"../../components/common/LoadingComponent\";\nimport { TicketStatus, TicketPriority } from \"../../models/enums\";\nimport { MetaData } from \"../../models/pagination\";\nimport { Project } from \"../../models/project\";\nimport { ProjectTicket } from \"../../models/ticket\";\nimport { ProjectPhaseTicketParams } from \"../../models/ticketParams\";\nimport { getProjectPhaseTicketParams } from \"../../util/queryParams\";\n\nexport default function ProjectActionsPage() {\n  const { slug } = useParams<{ slug: string }>();\n  const [searchParams] = useSearchParams();\n  const phaseId = searchParams.get(\"phaseId\");\n  const [project, setProject] = useState<Project | undefined>(undefined);\n  const [projectLoaded, setProjectLoaded] = useState(false);\n  const [ticketsLoaded, setTicketsLoaded] = useState(false);\n  const [tickets, setTickets] = useState<ProjectTicket[]>([]);\n  const [projectLoading, setProjectLoading] = useState(false);\n  const [ticketsLoading, setTicketsLoading] = useState(false);\n  const [ticketParams, setTicketParams] = useState<ProjectPhaseTicketParams>({\n    pageNumber: 1,\n    pageSize: 10,\n    phaseId: null,\n  });\n  const [metaData, setMetaData] = useState<MetaData | null>(null);\n\n  const loadTickets = useCallback(\n    async (id: string) => {\n      try {\n        setTicketsLoading(true);\n        const params = getProjectPhaseTicketParams(ticketParams);\n        const result = await agent.Projects.listTickets(id, params);\n        setTickets(result);\n        console.log(result.metadata);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setTicketsLoading(false);\n        setTicketsLoaded(true);\n      }\n    },\n    [ticketParams]\n  );\n\n  const loadProject = useCallback(\n    async (slug: string) => {\n      try {\n        setProjectLoading(true);\n        const result = await agent.Projects.details(slug);\n        setProject(result);\n        setProjectLoaded(true);\n        if (phaseId) {\n          setTicketParams({ ...ticketParams, phaseId });\n        }\n        await loadTickets(result.id);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setProjectLoading(false);\n      }\n    },\n    [loadTickets, phaseId, ticketParams]\n  );\n\n  useEffect(() => {\n    if (slug && !projectLoading && !projectLoaded) {\n      loadProject(slug);\n    }\n  }, [loadProject, projectLoading, projectLoaded, slug]);\n\n  if (ticketsLoading && !ticketsLoaded)\n    return (\n      <div className=\"py-20 w-screen h-screen bg-slate-300 flex  items-center justify-center\">\n        <LoadingComponent message={\"Loading Tickets...\"} />\n      </div>\n    );\n  if (!project) return <div className=\"py-20\">Not Found</div>;\n\n  return (\n    <div className=\"w-full h-full min-h-screen bg-slate-100 pt-16 lg:pt-20\">\n      <div className=\"container mx-auto flex flex-col gap-y-5 p-10 my-10 bg-white text-black drop-shadow-md\">\n        <div className=\"flex lg:flex-row flex-col justify-between lg:items-end border-b-2 border-black pb-1 flex-initial\">\n          <p className=\" font-Oswald text-4xl uppercase font-thin\">Tickets</p>\n\n          <p className=\" font-Oswald font-thin uppercase text-2xl\">\n            {project.title}\n          </p>\n        </div>\n\n        {tickets.length > 0 ? (\n          <ul className=\"list-none flex flex-col py-5 gap-y-5\">\n            {tickets.map((ticket) => (\n              <li key={ticket.id} className=\"list-item  \">\n                <Link\n                  to={`/tickets/${ticket.id}`}\n                  className=\" flex flex-col gap-y-5 lg:gap-y-0 lg:flex-row justify-between border-b border-b-gray-400 items-end py-5\"\n                >\n                  <div className=\"\">\n                    <p className=\" font-Oswald font-thin leading-loose text-2xl\">\n                      {ticket.subject}\n                    </p>\n                    <p className=\" font-Montserrat font-thin text-lg pr-5 \">\n                      {ticket.body}\n                    </p>\n                  </div>\n                  <div className=\"grid grid-flow-col max-w-xl gap-x-10 ml-auto\">\n                    <div>\n                      <p className=\" font-Oswald text-base uppercase font-thin text-gray-500\">\n                        Created\n                      </p>\n                      <p className=\"font-Oswald text-xl font-thin\">\n                        {format(new Date(ticket.creationDate), \"dd/MM/yy\")}\n                      </p>\n                    </div>\n\n                    <div>\n                      <p className=\" font-Oswald text-base uppercase font-thin text-gray-500\">\n                        Status\n                      </p>\n                      <p className=\"font-Oswald text-xl font-thin uppercase\">\n                        {TicketStatus[ticket.status]}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\" font-Oswald text-base uppercase font-thin text-gray-500\">\n                        Priority\n                      </p>\n                      <p className=\"font-Oswald text-xl font-thin uppercase\">\n                        {TicketPriority[ticket.priority]}\n                      </p>\n                    </div>\n                  </div>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div className=\"h-20 w-full flex items-center justify-center\">\n            <p className=\"font-Montserrat text-lg\">\n              This project have no phases\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n    // <div className=\"h-full min-h-screen w-screen bg-slate-300 px-5 pb-10 pt-20 \">\n    //   <div className=\"container mx-auto flex flex-col  w-full rounded-md overflow-hidden\">\n    //     <div className=\" w-full border-b-2 py-1 border-b-black flex flex-col lg:flex-row justify-between lg:items-end\">\n    //       <h1 className=\"flex-initial text-3xl lg:text-5xl font-Oswald  uppercase\">\n    //         {project.title}\n    //       </h1>\n    //       <p className=\"text-2xl font-Oswald uppercase font-thin\">Tickets</p>\n    //     </div>\n\n    //     {actions.length > 0 ? (\n    //       <ul className=\"list-none flex flex-col py-5 gap-y-5\">\n    //         {actions.map((action) => (\n    //           <li key={action.id} className=\"list-item  \">\n    //             <div className=\"flex flex-col lg:flex-row justify-start lg:items-center px-5 border-b border-b-black\">\n    //               <p className=\"font-Oswald text-xl ml-auto lg:ml-0 font-thin w-full max-w-[6rem]\">\n    //                 {format(new Date(action.actionDate), \"dd-MM-yy\")}\n    //               </p>\n    //               <div className=\"\">\n    //                 <p className=\" font-Oswald font-thin text-2xl\">\n    //                   {action.title}\n    //                 </p>\n    //                 <p className=\" font-Montserrat text-xl \">\n    //                   {action.description}\n    //                 </p>\n    //               </div>\n    //               <p className=\"lg:ml-auto font-Oswald uppercase font-thin text-lg\">\n    //                 {action.author}\n    //               </p>\n    //             </div>\n    //           </li>\n    //         ))}\n    //       </ul>\n    //     ) : (\n    //       <div className=\"h-20 w-full flex items-center justify-center\">\n    //         <p className=\"font-Montserrat text-lg\">\n    //           This project have no tickets\n    //         </p>\n    //       </div>\n    //     )}\n    //   </div>\n    // </div>\n  );\n}\n","import { PaginationParams } from \"../models/pagingParams\";\nimport { ProjectPhaseTicketParams, TicketParams } from \"../models/ticketParams\";\n\nexport function getTicketsParams(ticketParams: TicketParams) {\n    const params = new URLSearchParams();\n    params.append(\"pageNumber\", ticketParams.pageNumber.toString());\n    params.append(\"pageSize\", ticketParams.pageSize.toString());\n    params.append(\"orderBy\", ticketParams.orderBy);\n\n    if (ticketParams.searchTerm) {\n        params.append(\"searchTerm\", ticketParams.searchTerm);\n    }\n\n    if (ticketParams.status) {\n        params.append(\"status\", ticketParams.status.toString());\n    }\n\n    if (ticketParams.priority) {\n        params.append(\"priority\", ticketParams.priority.toString());\n    }\n\n    if (ticketParams.startDate) {\n        params.append(\"startDate\", ticketParams.startDate);\n    }\n\n    if (ticketParams.endDate) {\n        params.append(\"endDate\", ticketParams.endDate);\n    }\n    return params;\n}\n\nexport function getPaginationParams(paginationParams: PaginationParams) {\n    const params = new URLSearchParams();\n    params.append(\"pageNumber\", paginationParams.pageNumber.toString());\n    params.append(\"pageSize\", paginationParams.pageSize.toString());\n    if (paginationParams.searchTerm) {\n        params.append(\"searchTerm\", paginationParams.searchTerm);\n    }\n    return params;\n}\n\n\nexport function getProjectPhaseTicketParams(paginationParams: ProjectPhaseTicketParams) {\n    const params = new URLSearchParams();\n    params.append(\"pageNumber\", paginationParams.pageNumber.toString());\n    params.append(\"pageSize\", paginationParams.pageSize.toString());\n    if (paginationParams.phaseId) {\n        params.append(\"phaseId\", paginationParams.phaseId);\n    }\n\n    return params;\n}"],"names":["IssueOccurrence","TicketStatus","TicketPriority","IssueSeverity","IssueNature","ProjectActionsPage","slug","useParams","useSearchParams","phaseId","get","useState","undefined","project","setProject","projectLoaded","setProjectLoaded","ticketsLoaded","setTicketsLoaded","tickets","setTickets","projectLoading","setProjectLoading","ticketsLoading","setTicketsLoading","pageNumber","pageSize","ticketParams","setTicketParams","loadTickets","useCallback","id","params","getProjectPhaseTicketParams","agent","result","console","log","metadata","loadProject","useEffect","className","message","title","length","map","ticket","to","subject","body","format","Date","creationDate","status","priority","getPaginationParams","paginationParams","URLSearchParams","append","toString","searchTerm"],"sourceRoot":""}