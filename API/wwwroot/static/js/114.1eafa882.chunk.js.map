{"version":3,"file":"static/js/114.1eafa882.chunk.js","mappings":"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","sources":["app/pages/projects/ProjectActionsPage.tsx","app/util/queryParams.ts"],"sourcesContent":["import { format } from \"date-fns\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport agent from \"../../api/agent\";\nimport LoadingComponent from \"../../components/common/LoadingComponent\";\nimport { ProjectAction } from \"../../models/action\";\nimport { PaginationParams } from \"../../models/pagingParams\";\nimport { Project } from \"../../models/project\";\nimport { getPaginationParams } from \"../../util/queryParams\";\n\nexport default function ProjectActionsPage() {\n  const { slug } = useParams<{ slug: string }>();\n  const [project, setProject] = useState<Project | undefined>(undefined);\n  const [loaded, setLoaded] = useState(false);\n  const [actions, setActions] = useState<ProjectAction[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [paginationParams, setPaginationParams] = useState<PaginationParams>({\n    searchTerm: null,\n    pageNumber: 1,\n    pageSize: 10,\n  });\n\n  const loadProject = useCallback((slug: string) => {\n    setLoading(true);\n    agent.Projects.details(slug)\n      .then((response) => {\n        setProject(response);\n      })\n      .catch((err) => console.log(err))\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setLoading(true);\n    if (slug) {\n      loadProject(slug);\n    }\n    return () => {\n      setProject(undefined);\n    };\n  }, [loadProject, slug]);\n\n  const loadActions = useCallback(\n    (id: string) => {\n      setLoading(true);\n      const params = getPaginationParams(paginationParams);\n      agent.Projects.listActions(id, params)\n        .then((response) => {\n          setActions(response);\n        })\n        .catch((err) => console.log(err))\n        .finally(() => {\n          setLoaded(true);\n          setLoading(false);\n        });\n    },\n    [paginationParams]\n  );\n\n  useEffect(() => {\n    if (project && !loaded) {\n      loadActions(project.id);\n    }\n\n    return () => {\n      setActions([]);\n    };\n  }, [loadActions, loaded, project]);\n\n  useEffect(() => {\n    if (project && paginationParams) {\n      loadActions(project.id);\n    }\n  }, [loadActions, project, paginationParams]);\n\n  if (loading)\n    return (\n      <div className=\"py-20 w-screen h-screen bg-slate-300 flex  items-center justify-center\">\n        <LoadingComponent message={\"Loading Tickets...\"} />\n      </div>\n    );\n  if (!project) return <div className=\"py-20\">Not Found</div>;\n\n  return (\n    <div className=\"w-full h-full min-h-screen bg-slate-100 pt-16 lg:pt-20\">\n      <div className=\"container mx-auto flex flex-col gap-y-5 p-10 my-10 bg-white text-black drop-shadow-md\">\n        <div className=\"flex lg:flex-row flex-col justify-between lg:items-end border-b-2 border-black pb-1 flex-initial\">\n          <p className=\" font-Oswald text-4xl uppercase font-thin\">Actions</p>\n\n          <p className=\" font-Oswald font-thin uppercase text-2xl\">\n            {project.title}\n          </p>\n        </div>\n\n        {actions.length > 0 ? (\n          <ul className=\"list-none flex flex-col py-5 gap-y-5\">\n            {actions.map((action) => (\n              <li key={action.id} className=\"list-item  \">\n                <div className=\" flex flex-col gap-y-3 lg:gap-y-0 lg:flex-row justify-between border-b border-b-gray-400 lg:items-end py-5\">\n                  <div>\n                    <p className=\" font-Oswald font-thin text-2xl\">\n                      {action.title}\n                    </p>\n                    <p className=\" font-Montserrat font-thin text-lg\">\n                      {action.description}\n                    </p>\n                  </div>\n                  <div className=\"grid grid-cols-3 lg:max-w-md gap-x-10 ml-0 lg:ml-auto\">\n                    <div>\n                      <p className=\" font-Oswald text-base uppercase font-thin text-gray-500\">\n                        Date\n                      </p>\n                      <p className=\"font-Oswald text-xl font-thin\">\n                        {format(new Date(action.actionDate), \"dd/MM/yy\")}\n                      </p>\n                    </div>\n\n                    <div className=\"\">\n                      <p className=\" font-Oswald text-base uppercase font-thin text-gray-500\">\n                        By\n                      </p>\n                      <p className=\"font-Oswald text-xl font-thin lg:ml-auto\">\n                        {action.author}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div className=\"h-20 w-full flex items-center justify-center\">\n            <p className=\"font-Montserrat text-lg\">\n              This project have no phases\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n    // <div className=\"h-full min-h-screen w-screen bg-slate-300 px-5 pb-10 pt-20 \">\n    //   <div className=\"container mx-auto flex flex-col  w-full rounded-md overflow-hidden\">\n    //     <div className=\" w-full border-b-2 py-1 border-b-black flex flex-col lg:flex-row justify-between lg:items-end\">\n    //       <h1 className=\"flex-initial text-3xl lg:text-5xl font-Oswald  uppercase\">\n    //         {project.title}\n    //       </h1>\n    //       <p className=\"text-2xl font-Oswald uppercase font-thin\">Tickets</p>\n    //     </div>\n\n    //     {actions.length > 0 ? (\n    //       <ul className=\"list-none flex flex-col py-5 gap-y-5\">\n    //         {actions.map((action) => (\n    //           <li key={action.id} className=\"list-item  \">\n    //             <div className=\"flex flex-col lg:flex-row justify-start lg:items-center px-5 border-b border-b-black\">\n    //               <p className=\"font-Oswald text-xl ml-auto lg:ml-0 font-thin w-full max-w-[6rem]\">\n    //                 {format(new Date(action.actionDate), \"dd-MM-yy\")}\n    //               </p>\n    //               <div className=\"\">\n    //                 <p className=\" font-Oswald font-thin text-2xl\">\n    //                   {action.title}\n    //                 </p>\n    //                 <p className=\" font-Montserrat text-xl \">\n    //                   {action.description}\n    //                 </p>\n    //               </div>\n    //               <p className=\"lg:ml-auto font-Oswald uppercase font-thin text-lg\">\n    //                 {action.author}\n    //               </p>\n    //             </div>\n    //           </li>\n    //         ))}\n    //       </ul>\n    //     ) : (\n    //       <div className=\"h-20 w-full flex items-center justify-center\">\n    //         <p className=\"font-Montserrat text-lg\">\n    //           This project have no tickets\n    //         </p>\n    //       </div>\n    //     )}\n    //   </div>\n    // </div>\n  );\n}\n","import { PaginationParams } from \"../models/pagingParams\";\nimport { ProjectPhaseTicketParams, TicketParams } from \"../models/ticketParams\";\n\nexport function getTicketsParams(ticketParams: TicketParams) {\n    const params = new URLSearchParams();\n    params.append(\"pageNumber\", ticketParams.pageNumber.toString());\n    params.append(\"pageSize\", ticketParams.pageSize.toString());\n    params.append(\"orderBy\", ticketParams.orderBy);\n\n    if (ticketParams.searchTerm) {\n        params.append(\"searchTerm\", ticketParams.searchTerm);\n    }\n\n    if (ticketParams.status) {\n        params.append(\"status\", ticketParams.status.toString());\n    }\n\n    if (ticketParams.priority) {\n        params.append(\"priority\", ticketParams.priority.toString());\n    }\n\n    if (ticketParams.startDate) {\n        params.append(\"startDate\", ticketParams.startDate);\n    }\n\n    if (ticketParams.endDate) {\n        params.append(\"endDate\", ticketParams.endDate);\n    }\n    return params;\n}\n\nexport function getPaginationParams(paginationParams: PaginationParams) {\n    const params = new URLSearchParams();\n    params.append(\"pageNumber\", paginationParams.pageNumber.toString());\n    params.append(\"pageSize\", paginationParams.pageSize.toString());\n    if (paginationParams.searchTerm) {\n        params.append(\"searchTerm\", paginationParams.searchTerm);\n    }\n    return params;\n}\n\n\nexport function getProjectPhaseTicketParams(paginationParams: ProjectPhaseTicketParams) {\n    const params = new URLSearchParams();\n    params.append(\"pageNumber\", paginationParams.pageNumber.toString());\n    params.append(\"pageSize\", paginationParams.pageSize.toString());\n    if (paginationParams.phaseId) {\n        params.append(\"phaseId\", paginationParams.phaseId);\n    }\n\n    return params;\n}"],"names":["ProjectActionsPage","slug","useParams","useState","undefined","project","setProject","loaded","setLoaded","actions","setActions","loading","setLoading","searchTerm","pageNumber","pageSize","paginationParams","loadProject","useCallback","agent","then","response","catch","err","console","log","finally","useEffect","loadActions","id","params","getPaginationParams","className","message","title","length","map","action","description","format","Date","actionDate","author","URLSearchParams","append","toString","getProjectPhaseTicketParams","phaseId"],"sourceRoot":""}