{"version":3,"file":"static/js/537.5d33f769.chunk.js","mappings":"0KAUMA,EAEF,wFAFEA,EAIF,mNAJEA,EAMF,sHAGW,SAASC,EAAaC,GACnC,OAA8BC,EAAAA,EAAAA,KAAc,kBAAKD,GAAN,IAAaE,aAAc,MAA9DC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,MAEpB,OACE,iBACEC,UAAS,WACPF,EAAWG,MAAQ,mBAAqB,oBADjC,YAELR,GAHN,WAKE,kCACEO,UAAS,UAAKP,GACd,aAAYE,EAAMO,MAClBC,KAAMR,EAAMQ,MACRR,GACAI,IAELD,EAAWG,QACV,cAAGD,UAAWP,EAAd,SACGK,EAAWG,MAAMG,e,6LCnCfC,EAAwBC,EAAAA,GAAW,CAE5CC,MAAOD,EAAAA,KAAaC,MAAM,uBAAuBC,SAAS,qBAC1DC,SAAUH,EAAAA,KAELE,SAAS,0B,SCEH,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAsBC,EAAAA,EAAAA,MAAtBD,MACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAQ,CACvBC,KAAM,MACNC,UAAUC,EAAAA,EAAAA,GAAYhB,KAGtBiB,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,SACAC,EAEEP,EAFFO,aAHF,EAKIP,EADFQ,UAAaC,EAJf,EAIeA,aAAcC,EAJ7B,EAI6BA,QAZK,wCAelC,WAA0BC,GAA1B,kGAEUjB,GAASkB,EAAAA,EAAAA,IAAWD,IAF9B,OAGUE,GAAY,OAALjB,QAAK,IAALA,GAAA,UAAAA,EAAOiB,YAAP,eAAaC,WAAY,IACtChB,EAASe,GAJb,gDAMIE,QAAQC,IAAR,MANJ,0DAfkC,sBAgClC,OAPAC,EAAAA,EAAAA,YAAU,WACR,IAAM3B,EAAK,OAAGM,QAAH,IAAGA,OAAH,EAAGA,EAAON,MACjBA,GACFgB,EAAS,QAAShB,KAEnB,CAACgB,EAAD,OAAWV,QAAX,IAAWA,OAAX,EAAWA,EAAON,SAGnB,gBAAKP,UAAU,yEAAf,UACE,gBAAKA,UAAU,wFAAf,UACE,iBAAKA,UAAU,sBAAf,WACE,cAAGA,UAAU,mDAAb,sBAIA,kBACEmC,SAAUX,GAzCc,8CA0CxBxB,UAAU,gCAFZ,WAIE,SAAC,IAAD,CACEoC,aAAa,MACbjC,KAAK,QACLmB,QAASA,EACTpB,MAAM,QACNmC,KAAK,QACLC,YAAY,WAGd,SAAC,IAAD,CACEF,aAAa,MACbjC,KAAK,WACLmB,QAASA,EACTpB,MAAM,WACNmC,KAAK,WACLC,YAAY,cAGd,kBACEC,UAAWZ,EACX3B,UAAS,UACP2B,EAAU,cAAgB,aADnB,mGAGTxB,KAAK,SACLqC,MAAOd,EAAe,cAAgB,cAG1C,SAAC,KAAD,CACEe,GAAIC,EACJ1C,UAAU,2CAFZ,UAIE,cAAGA,UAAU,4BAAb,sDAUZ,IAAM0C,EAAe","sources":["app/components/common/TextInput.tsx","app/pages/account/loginValidation.ts","app/pages/account/LoginPage.tsx"],"sourcesContent":["import { useController, UseControllerProps } from \"react-hook-form\";\n\ninterface Props extends UseControllerProps {\n  label: string;\n  type?: string;\n  placeholder: string;\n  //fullWidth?: boolean;\n  autoComplete?: string | undefined;\n}\n\nconst styles = {\n  inputContainer:\n    \"w-full border-x-2 border-x-black bg-slate-200 flex flex-col lg:flex-row items-center \",\n  inputStyle:\n    \" font-Montserrat font-thin text-lg lg:text-xl text-inherit placeholder:capitalize placeholder:text-gray-500  placeholder:font-Oswald pb-2 pt-3 px-5 w-full h-auto block bg-transparent focus-within:outline-none\",\n  inputValidationStyle:\n    \" h-auto font-Oswald text-xl leading-none w-full text-center lg:text-left font-thin px-5 lg:py-0 text-gray-400 py-2 \",\n};\n\nexport default function AppTextInput(props: Props) {\n  const { fieldState, field } = useController({ ...props, defaultValue: \"\" });\n\n  return (\n    <div\n      className={` ${\n        fieldState.error ? \"border-r-red-500\" : \"border-x-inherit \"\n      } ${styles.inputContainer}`}\n    >\n      <input\n        className={`${styles.inputStyle}`}\n        aria-label={props.label}\n        type={props.type}\n        {...props}\n        {...field}\n      />\n      {fieldState.error && (\n        <p className={styles.inputValidationStyle}>\n          {fieldState.error.message}\n        </p>\n      )}\n    </div>\n  );\n}\n","import * as yup from \"yup\";\n\nexport const loginValidationSchema = yup.object({\n\n    email: yup.string().email(\"Email must be valid\").required(\"Email is required\"),\n    password: yup\n        .string()\n        .required(\"Password is required\")\n    ,\n});\n","import { yupResolver } from \"@hookform/resolvers/yup/dist/yup\";\nimport { useEffect } from \"react\";\nimport { FieldValues, useForm } from \"react-hook-form\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport AppTextInput from \"../../components/common/TextInput\";\nimport { signInUser } from \"../../slices/accountSlice\";\nimport { useAppDispatch } from \"../../store/configureStore\";\nimport { loginValidationSchema } from \"./loginValidation\";\n\nexport default function LoginPage() {\n  const dispatch = useAppDispatch();\n  const { state }: any | null = useLocation();\n  const navigate = useNavigate();\n  const newLocal = useForm({\n    mode: \"all\",\n    resolver: yupResolver(loginValidationSchema),\n  });\n  const {\n    control,\n    setValue,\n    handleSubmit,\n    formState: { isSubmitting, isValid },\n  } = newLocal;\n\n  async function submitForm(data: FieldValues) {\n    try {\n      await dispatch(signInUser(data));\n      const from = state?.from?.pathname || \"/\";\n      navigate(from);\n    } catch (error: any) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    const email = state?.email;\n    if (email) {\n      setValue(\"email\", email);\n    }\n  }, [setValue, state?.email]);\n\n  return (\n    <div className=\"py-20 h-screen w-screen flex items-center justify-center  bg-gray-100 \">\n      <div className=\"h-auto lg:p-20 p-5 w-full  drop-shadow-md rounded-md flex items-center justify-center\">\n        <div className=\"w-full lg:max-w-xl \">\n          <p className=\" font-Oswald text-7xl text-center pb-5 uppercase\">\n            Sing In\n          </p>\n\n          <form\n            onSubmit={handleSubmit(submitForm)}\n            className=\"flex flex-col gap-y-2  w-full\"\n          >\n            <AppTextInput\n              autoComplete=\"off\"\n              type=\"email\"\n              control={control}\n              label=\"Email\"\n              name=\"email\"\n              placeholder=\"Email\"\n            />\n\n            <AppTextInput\n              autoComplete=\"off\"\n              type=\"password\"\n              control={control}\n              label=\"Password\"\n              name=\"password\"\n              placeholder=\"Password\"\n            />\n\n            <input\n              disabled={!isValid}\n              className={`${\n                isValid ? \"opacity-100\" : \"opacity-50\"\n              } cursor-pointer bg-slate-800 text-white py-2 my-10 px-5 uppercase font-Oswald text-xl font-thin`}\n              type=\"submit\"\n              value={isSubmitting ? \"Please wait\" : \"Login\"}\n            />\n          </form>\n          <Link\n            to={registerPath}\n            className=\"underline underline-offset-2 text-center\"\n          >\n            <p className=\" font-Montserrat text-lg \">\n              Don't have an account!, Sign Up\n            </p>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst registerPath = \"/account/register\";\n"],"names":["styles","AppTextInput","props","useController","defaultValue","fieldState","field","className","error","label","type","message","loginValidationSchema","yup","email","required","password","LoginPage","dispatch","useAppDispatch","state","useLocation","navigate","useNavigate","newLocal","useForm","mode","resolver","yupResolver","control","setValue","handleSubmit","formState","isSubmitting","isValid","data","signInUser","from","pathname","console","log","useEffect","onSubmit","autoComplete","name","placeholder","disabled","value","to","registerPath"],"sourceRoot":""}