{"version":3,"file":"static/js/258.0d3a03b6.chunk.js","mappings":"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","sources":["app/components/Actions/ActionForm.tsx","app/components/projects/projectDetails/ProjectActions.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { FieldValues, useForm } from \"react-hook-form\";\nimport agent from \"../../api/agent\";\nimport { ProjectAction } from \"../../models/action\";\nimport { projectSelectors } from \"../../slices/projectSlice\";\nimport { useAppSelector } from \"../../store/configureStore\";\nimport AppTextArea from \"../common/TextArea\";\nimport AppTextInput from \"../common/TextInput\";\n\ninterface Props {\n  projectId: string;\n  action?: ProjectAction | null;\n  isFullScreen?: boolean;\n  onClose: () => void;\n}\n\nexport default function ActionForm({ projectId, action, onClose }: Props) {\n  const isEdit = !!action;\n  const project = useAppSelector((state) =>\n    projectSelectors.selectById(state, projectId)\n  );\n  const { control, handleSubmit, reset } = useForm({\n    mode: \"all\",\n    //resolver: yupResolver<any>(productValidation)\n  });\n\n  useEffect(() => {\n    if (action) {\n      const item = {\n        title: action.title,\n        description: action.description,\n      };\n      reset(item, { keepTouched: true });\n    }\n  }, [action, reset]);\n\n  async function handleSubmitData(data: FieldValues) {\n    const item: any = { ...data, projectId };\n\n    if (!projectId) return;\n\n    const itemChanged =\n      action &&\n      (action.title !== item.title || action.description !== item.description);\n\n    try {\n      if (isEdit && itemChanged) {\n        await agent.Actions.update({\n          ...item,\n          id: action.id,\n        });\n      }\n\n      if (!isEdit) {\n        await agent.Actions.create(projectId, item);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      onClose();\n    }\n  }\n\n  return (\n    <div className=\"px-5 lg:px-0 flex items-center justify-center\">\n      <div className=\" max-w-5xl w-full \">\n        <div>\n          <div className=\"flex flex-row justify-between border-b border-b-white py-1 items-end \">\n            <p className=\"font-Oswald text-5xl uppercase\">\n              {isEdit ? \"Edit Action\" : \"New Action\"}\n            </p>\n            <p className=\"font-Oswald text-xl uppercase font-thin\">\n              {project?.title}\n            </p>\n          </div>\n          <form\n            className=\"py-5 flex flex-col gap-y-5\"\n            onSubmit={handleSubmit(handleSubmitData)}\n          >\n            <AppTextInput\n              name=\"title\"\n              placeholder=\"Title\"\n              label=\"Title\"\n              \n              control={control}\n              rules={{ required: \"Title is required\" }}\n            />\n\n            <AppTextArea\n              name=\"description\"\n              placeholder=\"Description\"\n              label=\"Description\"\n              \n              rows={4}\n              control={control}\n              rules={{ required: \"Description is required\" }}\n            />\n\n            <div className=\"flex flex-row gap-x-2 mx-auto w-full justify-end py-5\">\n              <input\n                className=\"cursor-pointer border-slate-500 border-2 text-slate-300 py-1 px-5 uppercase font-Oswald text-xl font-thin\"\n                type=\"button\"\n                value=\"Cancel\"\n                onClick={onClose}\n              />\n              <input\n                className=\"cursor-pointer bg-slate-800 text-white py-1 px-5 uppercase font-Oswald text-xl font-thin\"\n                type=\"submit\"\n                value={isEdit ? \"Update Action\" : \"Create Action\"}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { lazy, useCallback, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport agent from \"../../../api/agent\";\nimport { ProjectAction } from \"../../../models/action\";\nimport ActionForm from \"../../Actions/ActionForm\";\n\nconst ActionsList = lazy(() => import(\"../../Actions/ActionsList\"));\n\ninterface Props {\n  projectId: string;\n  projectSlug: string;\n  isPermitted: boolean;\n}\n\nexport default function ProjectRecentActions({\n  projectId,\n  projectSlug,\n  isPermitted,\n}: Props) {\n  const [actions, setActions] = useState<ProjectAction[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [selectedAction, setSelectedAction] = useState<ProjectAction | null>(\n    null\n  );\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const loadProjectActions = useCallback(() => {\n    agent.Projects.listRecentActions(projectId)\n      .then((response) => {\n        setActions(response);\n      })\n      .catch((err) => console.log(err))\n      .finally(() => setLoaded(false));\n  }, [projectId]);\n\n  useEffect(() => {\n    if (projectId && !loaded) {\n      loadProjectActions();\n    }\n    return () => {\n      setActions([]);\n    };\n  }, [loadProjectActions, loaded, projectId]);\n\n  const handleOnClose = () => {\n    loadProjectActions();\n    if (selectedAction) setSelectedAction(null);\n    setIsFormOpen(false);\n  };\n\n  function handleOnActionSelect(item: ProjectAction) {\n    setSelectedAction(item);\n    setIsFormOpen(true);\n  }\n\n  return (\n    <div className=\"relative h-full flex flex-col overflow-hidden\">\n      {!isFormOpen ? (\n        <div>\n          <div className=\"flex-initial flex flex-col lg:flex-row lg:items-end px-5 lg:px-0 justify-between\">\n            <p className=\"font-Oswald text-3xl font-thin uppercase leading-loose\">\n              Recent Actions\n            </p>\n            <div className=\"flex flex-row items-end gap-x-2 self-start\">\n              {isPermitted && (\n                <button\n                  onClick={() => setIsFormOpen(true)}\n                  className=\"px-2 py-1 bg-slate-600 text-white\"\n                  type=\"button\"\n                >\n                  <p className=\"font-Oswald text-lg font-thin uppercase\">\n                    Add Actioin\n                  </p>\n                </button>\n              )}\n              <Link\n                className=\"px-2 py-1 bg-slate-600 text-white\"\n                to={`/projects/${projectSlug}/actions/`}\n              >\n                <p className=\"font-Oswald text-lg font-thin uppercase\">\n                  View Actions\n                </p>\n              </Link>\n            </div>\n          </div>\n\n          <div className=\"px-5\">\n            {actions.length > 0 ? (\n              <ActionsList\n                onActionSelected={handleOnActionSelect}\n                actions={actions}\n                isPermitted={isPermitted}\n              />\n            ) : (\n              <div className=\"h-40 w-full flex items-center justify-center\">\n                <p className=\"font-Montserrat text-xl text-gray-400\">EMPTY</p>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"w-full h-full px-5 lg:px-0\">\n          <ActionForm\n            projectId={projectId}\n            onClose={handleOnClose}\n            action={selectedAction}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["ActionForm","projectId","action","onClose","isEdit","project","useAppSelector","state","projectSelectors","useForm","mode","control","handleSubmit","reset","data","item","itemChanged","title","description","agent","id","console","log","useEffect","keepTouched","className","onSubmit","name","placeholder","label","rules","required","rows","type","value","onClick","ActionsList","lazy","ProjectRecentActions","projectSlug","isPermitted","useState","actions","setActions","loaded","setLoaded","selectedAction","setSelectedAction","isFormOpen","setIsFormOpen","loadProjectActions","useCallback","then","response","catch","err","finally","to","length","onActionSelected"],"sourceRoot":""}